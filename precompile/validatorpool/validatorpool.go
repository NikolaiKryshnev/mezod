package validatorpool

import (
	"embed"
	"fmt"

	"github.com/cosmos/cosmos-sdk/types"
	"github.com/ethereum/go-ethereum/common"
	"github.com/mezo-org/mezod/precompile"
	poatypes "github.com/mezo-org/mezod/x/poa/types"
)

//go:embed abi.json
var filesystem embed.FS

// EvmAddress is the EVM address of the validatorpool precompile. The address is
// prefixed with 0x7b7c which was used to derive Mezo chain ID. This prefix is
// used to avoid potential collisions with EVM native precompiles.
const EvmAddress = "0x7b7c000000000000000000000000000000000011"

// EvmByteCode is the EVM bytecode of the validatorpool precompile. This code is
// returned by eth_getCode and ensures the precompile address is detected as a
// smart contract by external services. note: It should NOT contain a 0x prefix
const EvmByteCode = "608060405234801561001057600080fd5b50600436106100b45760003560e01c806396c551751161007157806396c5517514610156578063c105ea2b14610169578063ca1e781914610171578063d66d9e1914610179578063e3ae4d0a14610181578063f2fde38b1461019457600080fd5b8063223b3b7a146100b95780636a050f5f146100e357806379ba5097146101065780637ce5e82f1461010e5780638bd2cc11146101235780638da5cb5b14610136575b600080fd5b6100cc6100c736600461068b565b6101a7565b6040516100da9291906106f8565b60405180910390f35b6100f66100f136600461079a565b610257565b60405190151581526020016100da565b6100f66102d4565b610116610353565b6040516100da91906107e8565b6100cc61013136600461068b565b6103c4565b61013e61042a565b6040516001600160a01b0390911681526020016100da565b6100f661016436600461068b565b6104a2565b61013e61051a565b61011661056e565b6100f66105b7565b6100f661018f36600461068b565b61060d565b6100f66101a236600461068b565b610640565b60006101db6040518060a0016040528060608152602001606081526020016060815260200160608152602001606081525090565b60005460405163111d9dbd60e11b81526001600160a01b0385811660048301529091169063223b3b7a906024015b600060405180830381865afa158015610226573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261024e9190810190610911565b91509150915091565b60008054604051636a050f5f60e01b81526001600160a01b0390911690636a050f5f9061028a9086908690600401610a90565b6020604051808303816000875af11580156102a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102cd9190610b67565b9392505050565b60008060009054906101000a90046001600160a01b03166001600160a01b03166379ba50976040518163ffffffff1660e01b81526004016020604051808303816000875af115801561032a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061034e9190610b67565b905090565b6000805460408051637ce5e82f60e01b815290516060936001600160a01b0390931692637ce5e82f92600480820193918290030181865afa15801561039c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261034e9190810190610b89565b60006103f86040518060a0016040528060608152602001606081526020016060815260200160608152602001606081525090565b600054604051638bd2cc1160e01b81526001600160a01b03858116600483015290911690638bd2cc1190602401610209565b60008060009054906101000a90046001600160a01b03166001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561047e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061034e9190610c3b565b600080546040516396c5517560e01b81526001600160a01b038481166004830152909116906396c55175906024015b6020604051808303816000875af11580156104f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105149190610b67565b92915050565b60008060009054906101000a90046001600160a01b03166001600160a01b031663c105ea2b6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561047e573d6000803e3d6000fd5b600080546040805163ca1e781960e01b815290516060936001600160a01b039093169263ca1e781992600480820193918290030181865afa15801561039c573d6000803e3d6000fd5b60008060009054906101000a90046001600160a01b03166001600160a01b031663d66d9e196040518163ffffffff1660e01b81526004016020604051808303816000875af115801561032a573d6000803e3d6000fd5b600080546040516371d7268560e11b81526001600160a01b0384811660048301529091169063e3ae4d0a906024016104d1565b6000805460405163f2fde38b60e01b81526001600160a01b0384811660048301529091169063f2fde38b906024016104d1565b6001600160a01b038116811461068857600080fd5b50565b60006020828403121561069d57600080fd5b81356102cd81610673565b60005b838110156106c35781810151838201526020016106ab565b50506000910152565b600081518084526106e48160208601602086016106a8565b601f01601f19169290920160200192915050565b828152604060208201526000825160a0604084015261071a60e08401826106cc565b90506020840151603f198085840301606086015261073883836106cc565b9250604086015191508085840301608086015261075583836106cc565b925060608601519150808584030160a086015261077283836106cc565b925060808601519150808584030160c08601525061079082826106cc565b9695505050505050565b600080604083850312156107ad57600080fd5b82359150602083013567ffffffffffffffff8111156107cb57600080fd5b830160a081860312156107dd57600080fd5b809150509250929050565b6020808252825182820181905260009190848201906040850190845b818110156108295783516001600160a01b031683529284019291840191600101610804565b50909695505050505050565b634e487b7160e01b600052604160045260246000fd5b60405160a0810167ffffffffffffffff8111828210171561086e5761086e610835565b60405290565b604051601f8201601f1916810167ffffffffffffffff8111828210171561089d5761089d610835565b604052919050565b600082601f8301126108b657600080fd5b815167ffffffffffffffff8111156108d0576108d0610835565b6108e3601f8201601f1916602001610874565b8181528460208386010111156108f857600080fd5b6109098260208301602087016106a8565b949350505050565b6000806040838503121561092457600080fd5b82519150602083015167ffffffffffffffff8082111561094357600080fd5b9084019060a0828703121561095757600080fd5b61095f61084b565b82518281111561096e57600080fd5b61097a888286016108a5565b82525060208301518281111561098f57600080fd5b61099b888286016108a5565b6020830152506040830151828111156109b357600080fd5b6109bf888286016108a5565b6040830152506060830151828111156109d757600080fd5b6109e3888286016108a5565b6060830152506080830151828111156109fb57600080fd5b610a07888286016108a5565b6080830152508093505050509250929050565b6000808335601e19843603018112610a3157600080fd5b830160208101925035905067ffffffffffffffff811115610a5157600080fd5b803603821315610a6057600080fd5b9250929050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b828152604060208201526000610aa68384610a1a565b60a06040850152610abb60e085018284610a67565b915050610acb6020850185610a1a565b603f1980868503016060870152610ae3848385610a67565b9350610af26040880188610a1a565b9350915080868503016080870152610b0b848484610a67565b9350610b1a6060880188610a1a565b93509150808685030160a0870152610b33848484610a67565b9350610b426080880188610a1a565b93509150808685030160c087015250610b5c838383610a67565b979650505050505050565b600060208284031215610b7957600080fd5b815180151581146102cd57600080fd5b60006020808385031215610b9c57600080fd5b825167ffffffffffffffff80821115610bb457600080fd5b818501915085601f830112610bc857600080fd5b815181811115610bda57610bda610835565b8060051b9150610beb848301610874565b8181529183018401918481019088841115610c0557600080fd5b938501935b83851015610c2f5784519250610c1f83610673565b8282529385019390850190610c0a565b98975050505050505050565b600060208284031215610c4d57600080fd5b81516102cd8161067356fea26469706673582212207e1fb741b374f4051372853c8c771a3338365f994b23cc4feb7c15572707da0a64736f6c63430008180033"

// Description is the validator description structure that contains information
// about the validator.
//
// Note: This struct mimics `poatypes.Description` however is declared with an
// `= struct`, this is required for correct deserialization within a precompile
// methods `Run` function
type Description = struct {
	// Moniker is the validator's name.
	Moniker string `json:"moniker"`
	// Identity is the optional identity signature (ex. UPort or Keybase).
	Identity string `json:"identity"`
	// Website is the optional website link.
	Website string `json:"website"`
	// SecurityContact is the optional security contact information.
	SecurityContact string `json:"securityContact"`
	// Details is the optional details about the validator.
	Details string `json:"details"`
}

// PoaKeeper interface used by the precompile
type PoaKeeper interface {
	// GetApplication returns the application for a operator
	GetApplication(types.Context, types.ValAddress) (poatypes.Application, bool)
	// GetApplications returns all applications
	GetAllApplications(types.Context) []poatypes.Application
	// SubmitApplication submits a new application to the validator pool
	SubmitApplication(types.Context, types.AccAddress, poatypes.Validator) error
	// ApproveApplication (onlyOwner) approves a pending application and
	// promotes the applications candidate to validator
	ApproveApplication(types.Context, types.AccAddress, types.ValAddress) error
	// GetValidator returns the validator for a operator address
	GetValidator(types.Context, types.ValAddress) (poatypes.Validator, bool)
	// GetAllValidators returns all validators (in all states)
	GetAllValidators(types.Context) []poatypes.Validator
	// Leave removes the sender from the validator pool
	Leave(types.Context, types.AccAddress) error
	// Kick (onlyOwner) removes a validator from the pool
	Kick(types.Context, types.AccAddress, types.ValAddress) error
	// GetOwner returns the validator pool owner address
	GetOwner(types.Context) types.AccAddress
	// GetCandidateOwner returns the candidate validator pool owner address
	GetCandidateOwner(types.Context) types.AccAddress
	// TransferOwnership (onlyOwner) starts ownership transfer flow with a pending
	// ownership transfer
	TransferOwnership(types.Context, types.AccAddress, types.AccAddress) error
	// AcceptOwnership accepts a pending ownership transfer
	AcceptOwnership(types.Context, types.AccAddress) error
}

// NewPrecompile creates a new validator pool precompile.
func NewPrecompile(pk PoaKeeper) (*precompile.Contract, error) {
	contractAbi, err := precompile.LoadAbiFile(filesystem, "abi.json")
	if err != nil {
		return nil, fmt.Errorf("failed to load abi file: [%w]", err)
	}

	contract := precompile.NewContract(
		contractAbi,
		common.HexToAddress(EvmAddress),
		EvmByteCode,
	)

	methods := newPrecompileMethods(pk)
	contract.RegisterMethods(methods...)

	return contract, nil
}

// newPrecompileMethods builds the list of methods for the validator pool precompile.
// All methods returned by this function are registered in the validator pool precompile.
func newPrecompileMethods(pk PoaKeeper) []precompile.Method {
	return []precompile.Method{
		newSubmitApplicationMethod(pk),
		newApproveApplicationMethod(pk),
		newKickMethod(pk),
		newLeaveMethod(pk),
		newOwnerMethod(pk),
		newCandidateOwnerMethod(pk),
		newTransferOwnershipMethod(pk),
		newAcceptOwnershipMethod(pk),
		newValidatorMethod(pk),
		newValidatorsMethod(pk),
		newApplicationMethod(pk),
		newApplicationsMethod(pk),
	}
}
