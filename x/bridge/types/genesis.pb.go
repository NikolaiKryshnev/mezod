// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mezo/bridge/v1/genesis.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// GenesisState defines the bridge module's genesis state.
type GenesisState struct {
	// params defines all the parameters of related to bridge.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
	// assets_locked_sequence_tip is the current sequence tip for the AssetsLocked
	// events. The tip denotes the sequence number of the last event processed by
	// the x/bridge module.
	AssetsLockedSequenceTip cosmossdk_io_math.Int `protobuf:"bytes,2,opt,name=assets_locked_sequence_tip,json=assetsLockedSequenceTip,proto3,customtype=cosmossdk.io/math.Int" json:"assets_locked_sequence_tip"`
	// source_btc_token is the hex-encoded EVM address of the BTC token on the source chain.
	// AssetsLocked events carrying this token address are directly mapped to the
	// Mezo native denomination - BTC.
	SourceBtcToken string `protobuf:"bytes,3,opt,name=source_btc_token,json=sourceBtcToken,proto3" json:"source_btc_token,omitempty"`
	// erc20_tokens_mappings is the list of ERC20 token mappings supported by the
	// bridge.
	Erc20TokensMappings []*ERC20TokenMapping `protobuf:"bytes,4,rep,name=erc20_tokens_mappings,json=erc20TokensMappings,proto3" json:"erc20_tokens_mappings,omitempty"`
	// initial_btc_supply is the BTC supply minted by the network
	// at genesis.
	InitialBtcSupply cosmossdk_io_math.Int `protobuf:"bytes,5,opt,name=initial_btc_supply,json=initialBtcSupply,proto3,customtype=cosmossdk.io/math.Int" json:"initial_btc_supply"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_c6a9d1c622979efc, []int{0}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

func (m *GenesisState) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

func (m *GenesisState) GetSourceBtcToken() string {
	if m != nil {
		return m.SourceBtcToken
	}
	return ""
}

func (m *GenesisState) GetErc20TokensMappings() []*ERC20TokenMapping {
	if m != nil {
		return m.Erc20TokensMappings
	}
	return nil
}

func init() {
	proto.RegisterType((*GenesisState)(nil), "mezo.bridge.v1.GenesisState")
}

func init() { proto.RegisterFile("mezo/bridge/v1/genesis.proto", fileDescriptor_c6a9d1c622979efc) }

var fileDescriptor_c6a9d1c622979efc = []byte{
	// 378 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x91, 0xc1, 0x6e, 0xda, 0x40,
	0x14, 0x45, 0x6d, 0xa0, 0x48, 0x35, 0x15, 0x42, 0x6e, 0x69, 0x2d, 0xda, 0x1a, 0xda, 0x95, 0x37,
	0x19, 0x83, 0x93, 0x2f, 0x70, 0x14, 0x45, 0x51, 0x12, 0x29, 0x32, 0x64, 0xc3, 0xc6, 0xb2, 0xc7,
	0x23, 0x33, 0x02, 0x7b, 0x26, 0x7e, 0x63, 0x14, 0xf2, 0x15, 0xf9, 0x2c, 0x96, 0x2c, 0xa3, 0x2c,
	0x50, 0x04, 0xfb, 0x7c, 0x43, 0xe4, 0xb1, 0xb3, 0x08, 0xab, 0xec, 0x46, 0xf7, 0xde, 0x73, 0xe7,
	0x3d, 0x3d, 0xed, 0x4f, 0x42, 0x1e, 0x98, 0x1d, 0x66, 0x34, 0x8a, 0x89, 0xbd, 0x1c, 0xd9, 0x31,
	0x49, 0x09, 0x50, 0x40, 0x3c, 0x63, 0x82, 0xe9, 0xed, 0xc2, 0x45, 0xa5, 0x8b, 0x96, 0xa3, 0xde,
	0x8f, 0x98, 0xc5, 0x4c, 0x5a, 0x76, 0xf1, 0x2a, 0x53, 0xbd, 0xdf, 0x07, 0x1d, 0x55, 0x5e, 0x9a,
	0xff, 0x5f, 0x6b, 0xda, 0xb7, 0xf3, 0xb2, 0x74, 0x2c, 0x02, 0x41, 0xf4, 0x13, 0xad, 0xc9, 0x83,
	0x2c, 0x48, 0xc0, 0x50, 0x07, 0xaa, 0xd5, 0x72, 0x7e, 0xa2, 0x8f, 0x9f, 0xa0, 0x1b, 0xe9, 0xba,
	0x8d, 0xf5, 0xb6, 0xaf, 0x78, 0x55, 0x56, 0x9f, 0x6a, 0xbd, 0x00, 0x80, 0x08, 0xf0, 0x17, 0x0c,
	0xcf, 0x49, 0xe4, 0x03, 0xb9, 0xcb, 0x49, 0x8a, 0x89, 0x2f, 0x28, 0x37, 0x6a, 0x03, 0xd5, 0xfa,
	0xea, 0xfe, 0x2d, 0x88, 0xe7, 0x6d, 0xbf, 0x8b, 0x19, 0x24, 0x0c, 0x20, 0x9a, 0x23, 0xca, 0xec,
	0x24, 0x10, 0x33, 0x74, 0x91, 0x0a, 0xef, 0x57, 0x59, 0x70, 0x25, 0xf9, 0x71, 0x85, 0x4f, 0x28,
	0xd7, 0x2d, 0xad, 0x03, 0x2c, 0xcf, 0x30, 0xf1, 0x43, 0x81, 0x7d, 0xc1, 0xe6, 0x24, 0x35, 0xea,
	0x45, 0xa3, 0xd7, 0x2e, 0x75, 0x57, 0xe0, 0x49, 0xa1, 0xea, 0xb7, 0x5a, 0x97, 0x64, 0xd8, 0x19,
	0x96, 0x21, 0xf0, 0x93, 0x80, 0x73, 0x9a, 0xc6, 0x60, 0x34, 0x06, 0x75, 0xab, 0xe5, 0xfc, 0x3b,
	0x5c, 0xe5, 0xcc, 0x3b, 0x75, 0x86, 0x12, 0xbd, 0x2e, 0x93, 0xde, 0x77, 0xc9, 0x4b, 0x09, 0x2a,
	0x0d, 0xf4, 0x4b, 0x4d, 0xa7, 0x29, 0x15, 0x34, 0x58, 0xc8, 0x09, 0x20, 0xe7, 0x7c, 0xb1, 0x32,
	0xbe, 0x7c, 0x66, 0xa9, 0x4e, 0x05, 0xba, 0x02, 0x8f, 0x25, 0xe6, 0xba, 0xeb, 0x9d, 0xa9, 0x6e,
	0x76, 0xa6, 0xfa, 0xb2, 0x33, 0xd5, 0xc7, 0xbd, 0xa9, 0x6c, 0xf6, 0xa6, 0xf2, 0xb4, 0x37, 0x95,
	0xa9, 0x15, 0x53, 0x31, 0xcb, 0x43, 0x84, 0x59, 0x62, 0x17, 0x83, 0x1e, 0xb1, 0x2c, 0x96, 0x8f,
	0xc8, 0xbe, 0x7f, 0x3f, 0x9f, 0x58, 0x71, 0x02, 0x61, 0x53, 0xde, 0xee, 0xf8, 0x2d, 0x00, 0x00,
	0xff, 0xff, 0xe6, 0x98, 0x49, 0x72, 0x1e, 0x02, 0x00, 0x00,
}

func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.InitialBtcSupply.Size()
		i -= size
		if _, err := m.InitialBtcSupply.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.Erc20TokensMappings) > 0 {
		for iNdEx := len(m.Erc20TokensMappings) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Erc20TokensMappings[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.SourceBtcToken) > 0 {
		i -= len(m.SourceBtcToken)
		copy(dAtA[i:], m.SourceBtcToken)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.SourceBtcToken)))
		i--
		dAtA[i] = 0x1a
	}
	{
		size := m.AssetsLockedSequenceTip.Size()
		i -= size
		if _, err := m.AssetsLockedSequenceTip.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintGenesis(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenesis(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovGenesis(uint64(l))
	l = m.AssetsLockedSequenceTip.Size()
	n += 1 + l + sovGenesis(uint64(l))
	l = len(m.SourceBtcToken)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if len(m.Erc20TokensMappings) > 0 {
		for _, e := range m.Erc20TokensMappings {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	l = m.InitialBtcSupply.Size()
	n += 1 + l + sovGenesis(uint64(l))
	return n
}

func sovGenesis(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenesis(x uint64) (n int) {
	return sovGenesis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetsLockedSequenceTip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AssetsLockedSequenceTip.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceBtcToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceBtcToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Erc20TokensMappings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Erc20TokensMappings = append(m.Erc20TokensMappings, &ERC20TokenMapping{})
			if err := m.Erc20TokensMappings[len(m.Erc20TokensMappings)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitialBtcSupply", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InitialBtcSupply.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenesis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenesis
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenesis
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenesis
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenesis        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenesis          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenesis = fmt.Errorf("proto: unexpected end of group")
)
