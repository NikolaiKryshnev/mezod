// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: evmos/poa/v1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgUpdateParams defines a Msg to update the module parameters.
type MsgUpdateParams struct {
	// authority is the address of the governance account.
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// params defines the module parameters to update.
	// NOTE: All parameters must be supplied.
	Params Params `protobuf:"bytes,2,opt,name=params,proto3" json:"params"`
}

func (m *MsgUpdateParams) Reset()         { *m = MsgUpdateParams{} }
func (m *MsgUpdateParams) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParams) ProtoMessage()    {}
func (*MsgUpdateParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d36ebe8fc4ea1af, []int{0}
}
func (m *MsgUpdateParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParams.Merge(m, src)
}
func (m *MsgUpdateParams) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParams) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParams.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParams proto.InternalMessageInfo

func (m *MsgUpdateParams) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgUpdateParams) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// MsgUpdateParamsResponse defines the response of the Msg/UpdateParams RPC method.
type MsgUpdateParamsResponse struct {
}

func (m *MsgUpdateParamsResponse) Reset()         { *m = MsgUpdateParamsResponse{} }
func (m *MsgUpdateParamsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParamsResponse) ProtoMessage()    {}
func (*MsgUpdateParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d36ebe8fc4ea1af, []int{1}
}
func (m *MsgUpdateParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParamsResponse.Merge(m, src)
}
func (m *MsgUpdateParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParamsResponse proto.InternalMessageInfo

// MsgSubmitApplication defines a Msg to submit an application to join
// the validator pool.
type MsgSubmitApplication struct {
	// candidate is the validator candidate submitting the application.
	Candidate Validator `protobuf:"bytes,1,opt,name=candidate,proto3" json:"candidate"`
}

func (m *MsgSubmitApplication) Reset()         { *m = MsgSubmitApplication{} }
func (m *MsgSubmitApplication) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitApplication) ProtoMessage()    {}
func (*MsgSubmitApplication) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d36ebe8fc4ea1af, []int{2}
}
func (m *MsgSubmitApplication) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitApplication) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitApplication.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitApplication) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitApplication.Merge(m, src)
}
func (m *MsgSubmitApplication) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitApplication) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitApplication.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitApplication proto.InternalMessageInfo

func (m *MsgSubmitApplication) GetCandidate() Validator {
	if m != nil {
		return m.Candidate
	}
	return Validator{}
}

// MsgSubmitApplicationResponse defines the response of the
// Msg/SubmitApplication RPC method.
type MsgSubmitApplicationResponse struct {
}

func (m *MsgSubmitApplicationResponse) Reset()         { *m = MsgSubmitApplicationResponse{} }
func (m *MsgSubmitApplicationResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitApplicationResponse) ProtoMessage()    {}
func (*MsgSubmitApplicationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d36ebe8fc4ea1af, []int{3}
}
func (m *MsgSubmitApplicationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitApplicationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitApplicationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitApplicationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitApplicationResponse.Merge(m, src)
}
func (m *MsgSubmitApplicationResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitApplicationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitApplicationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitApplicationResponse proto.InternalMessageInfo

// MsgVote defines a Msg to vote on a pending validator's application or
// kick proposal.
type MsgVote struct {
	// vote_type is the type of vote being cast. It can be either 0 for validator's
	// application or 1 for kick proposal.
	VoteType uint32 `protobuf:"varint,1,opt,name=vote_type,json=voteType,proto3" json:"vote_type,omitempty"`
	// voter_addr is the address of the validator casting the vote.
	VoterAddr []byte `protobuf:"bytes,2,opt,name=voter_addr,json=voterAddr,proto3" json:"voter_addr,omitempty"`
	// candidate_addr is the address of the candidate being voted on.
	CandidateAddr []byte `protobuf:"bytes,3,opt,name=candidate_addr,json=candidateAddr,proto3" json:"candidate_addr,omitempty"`
	// approve is a boolean indicating whether the vote is to approve the action.
	Approve bool `protobuf:"varint,4,opt,name=approve,proto3" json:"approve,omitempty"`
}

func (m *MsgVote) Reset()         { *m = MsgVote{} }
func (m *MsgVote) String() string { return proto.CompactTextString(m) }
func (*MsgVote) ProtoMessage()    {}
func (*MsgVote) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d36ebe8fc4ea1af, []int{4}
}
func (m *MsgVote) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgVote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgVote.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgVote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgVote.Merge(m, src)
}
func (m *MsgVote) XXX_Size() int {
	return m.Size()
}
func (m *MsgVote) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgVote.DiscardUnknown(m)
}

var xxx_messageInfo_MsgVote proto.InternalMessageInfo

func (m *MsgVote) GetVoteType() uint32 {
	if m != nil {
		return m.VoteType
	}
	return 0
}

func (m *MsgVote) GetVoterAddr() []byte {
	if m != nil {
		return m.VoterAddr
	}
	return nil
}

func (m *MsgVote) GetCandidateAddr() []byte {
	if m != nil {
		return m.CandidateAddr
	}
	return nil
}

func (m *MsgVote) GetApprove() bool {
	if m != nil {
		return m.Approve
	}
	return false
}

// MsgVoteResponse defines the response of the Msg/Vote RPC method.
type MsgVoteResponse struct {
}

func (m *MsgVoteResponse) Reset()         { *m = MsgVoteResponse{} }
func (m *MsgVoteResponse) String() string { return proto.CompactTextString(m) }
func (*MsgVoteResponse) ProtoMessage()    {}
func (*MsgVoteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d36ebe8fc4ea1af, []int{5}
}
func (m *MsgVoteResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgVoteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgVoteResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgVoteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgVoteResponse.Merge(m, src)
}
func (m *MsgVoteResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgVoteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgVoteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgVoteResponse proto.InternalMessageInfo

// MsgProposeKick defines a Msg to propose to kick a validator from the
// validator pool.
type MsgProposeKick struct {
	// candidate_addr is the address of the validator being proposed to be kicked.
	CandidateAddr []byte `protobuf:"bytes,1,opt,name=candidate_addr,json=candidateAddr,proto3" json:"candidate_addr,omitempty"`
	// proposer_addr is the address of the validator proposing the kick.
	ProposerAddr []byte `protobuf:"bytes,2,opt,name=proposer_addr,json=proposerAddr,proto3" json:"proposer_addr,omitempty"`
}

func (m *MsgProposeKick) Reset()         { *m = MsgProposeKick{} }
func (m *MsgProposeKick) String() string { return proto.CompactTextString(m) }
func (*MsgProposeKick) ProtoMessage()    {}
func (*MsgProposeKick) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d36ebe8fc4ea1af, []int{6}
}
func (m *MsgProposeKick) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgProposeKick) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgProposeKick.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgProposeKick) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgProposeKick.Merge(m, src)
}
func (m *MsgProposeKick) XXX_Size() int {
	return m.Size()
}
func (m *MsgProposeKick) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgProposeKick.DiscardUnknown(m)
}

var xxx_messageInfo_MsgProposeKick proto.InternalMessageInfo

func (m *MsgProposeKick) GetCandidateAddr() []byte {
	if m != nil {
		return m.CandidateAddr
	}
	return nil
}

func (m *MsgProposeKick) GetProposerAddr() []byte {
	if m != nil {
		return m.ProposerAddr
	}
	return nil
}

// MsgProposeKickResponse defines the response of the Msg/ProposeKick RPC method.
type MsgProposeKickResponse struct {
}

func (m *MsgProposeKickResponse) Reset()         { *m = MsgProposeKickResponse{} }
func (m *MsgProposeKickResponse) String() string { return proto.CompactTextString(m) }
func (*MsgProposeKickResponse) ProtoMessage()    {}
func (*MsgProposeKickResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d36ebe8fc4ea1af, []int{7}
}
func (m *MsgProposeKickResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgProposeKickResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgProposeKickResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgProposeKickResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgProposeKickResponse.Merge(m, src)
}
func (m *MsgProposeKickResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgProposeKickResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgProposeKickResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgProposeKickResponse proto.InternalMessageInfo

// MsgLeaveValidatorSet defines a Msg to execute a validator's request to leave
// the validator pool.
type MsgLeaveValidatorSet struct {
	// validator_addr is the address of the validator requesting to leave the pool.
	ValidatorAddr []byte `protobuf:"bytes,1,opt,name=validator_addr,json=validatorAddr,proto3" json:"validator_addr,omitempty"`
}

func (m *MsgLeaveValidatorSet) Reset()         { *m = MsgLeaveValidatorSet{} }
func (m *MsgLeaveValidatorSet) String() string { return proto.CompactTextString(m) }
func (*MsgLeaveValidatorSet) ProtoMessage()    {}
func (*MsgLeaveValidatorSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d36ebe8fc4ea1af, []int{8}
}
func (m *MsgLeaveValidatorSet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgLeaveValidatorSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgLeaveValidatorSet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgLeaveValidatorSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgLeaveValidatorSet.Merge(m, src)
}
func (m *MsgLeaveValidatorSet) XXX_Size() int {
	return m.Size()
}
func (m *MsgLeaveValidatorSet) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgLeaveValidatorSet.DiscardUnknown(m)
}

var xxx_messageInfo_MsgLeaveValidatorSet proto.InternalMessageInfo

func (m *MsgLeaveValidatorSet) GetValidatorAddr() []byte {
	if m != nil {
		return m.ValidatorAddr
	}
	return nil
}

// MsgLeaveValidatorSetResponse defines the response of the
// Msg/LeaveValidatorSet RPC method.
type MsgLeaveValidatorSetResponse struct {
}

func (m *MsgLeaveValidatorSetResponse) Reset()         { *m = MsgLeaveValidatorSetResponse{} }
func (m *MsgLeaveValidatorSetResponse) String() string { return proto.CompactTextString(m) }
func (*MsgLeaveValidatorSetResponse) ProtoMessage()    {}
func (*MsgLeaveValidatorSetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d36ebe8fc4ea1af, []int{9}
}
func (m *MsgLeaveValidatorSetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgLeaveValidatorSetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgLeaveValidatorSetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgLeaveValidatorSetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgLeaveValidatorSetResponse.Merge(m, src)
}
func (m *MsgLeaveValidatorSetResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgLeaveValidatorSetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgLeaveValidatorSetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgLeaveValidatorSetResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgUpdateParams)(nil), "evmos.poa.v1.MsgUpdateParams")
	proto.RegisterType((*MsgUpdateParamsResponse)(nil), "evmos.poa.v1.MsgUpdateParamsResponse")
	proto.RegisterType((*MsgSubmitApplication)(nil), "evmos.poa.v1.MsgSubmitApplication")
	proto.RegisterType((*MsgSubmitApplicationResponse)(nil), "evmos.poa.v1.MsgSubmitApplicationResponse")
	proto.RegisterType((*MsgVote)(nil), "evmos.poa.v1.MsgVote")
	proto.RegisterType((*MsgVoteResponse)(nil), "evmos.poa.v1.MsgVoteResponse")
	proto.RegisterType((*MsgProposeKick)(nil), "evmos.poa.v1.MsgProposeKick")
	proto.RegisterType((*MsgProposeKickResponse)(nil), "evmos.poa.v1.MsgProposeKickResponse")
	proto.RegisterType((*MsgLeaveValidatorSet)(nil), "evmos.poa.v1.MsgLeaveValidatorSet")
	proto.RegisterType((*MsgLeaveValidatorSetResponse)(nil), "evmos.poa.v1.MsgLeaveValidatorSetResponse")
}

func init() { proto.RegisterFile("evmos/poa/v1/tx.proto", fileDescriptor_0d36ebe8fc4ea1af) }

var fileDescriptor_0d36ebe8fc4ea1af = []byte{
	// 605 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x54, 0x31, 0x6f, 0xd3, 0x40,
	0x14, 0x8e, 0x69, 0xd5, 0x36, 0xd7, 0x34, 0x55, 0x4d, 0xda, 0xb8, 0xa6, 0x31, 0x91, 0xa1, 0x28,
	0xaa, 0x84, 0xad, 0x04, 0x89, 0x21, 0x30, 0xd0, 0xac, 0x10, 0xa9, 0x38, 0xa5, 0x03, 0x4b, 0x74,
	0xb1, 0x4f, 0xae, 0x45, 0x9d, 0x3b, 0xf9, 0x2e, 0x56, 0xb3, 0xb2, 0x23, 0xb1, 0xf1, 0x37, 0x18,
	0x10, 0xbf, 0xa1, 0x63, 0xc5, 0xc4, 0x84, 0x50, 0x32, 0xf0, 0x37, 0xd0, 0xdd, 0x39, 0x4e, 0x1c,
	0x87, 0xb2, 0x44, 0x7e, 0xdf, 0xfb, 0xde, 0xfb, 0xbe, 0xbb, 0xf7, 0x72, 0x60, 0x1f, 0xc5, 0x21,
	0xa6, 0x36, 0xc1, 0xd0, 0x8e, 0x9b, 0x36, 0xbb, 0xb6, 0x48, 0x84, 0x19, 0x56, 0x4b, 0x02, 0xb6,
	0x08, 0x86, 0x56, 0xdc, 0xd4, 0xab, 0x2e, 0xa6, 0x9c, 0x15, 0x52, 0x9f, 0xb3, 0x42, 0xea, 0x4b,
	0x9a, 0x7e, 0x28, 0x13, 0x7d, 0x11, 0xd9, 0x32, 0x48, 0x52, 0x07, 0x99, 0xc6, 0xbc, 0x91, 0xc4,
	0x2b, 0x3e, 0xf6, 0xb1, 0xe4, 0xf3, 0x2f, 0x89, 0x9a, 0x9f, 0x14, 0xb0, 0xdb, 0xa5, 0xfe, 0x3b,
	0xe2, 0x41, 0x86, 0xce, 0x60, 0x04, 0x43, 0xaa, 0x3e, 0x07, 0x45, 0x38, 0x62, 0x97, 0x38, 0x0a,
	0xd8, 0x58, 0x53, 0xea, 0x4a, 0xa3, 0xd8, 0xd1, 0x7e, 0x7c, 0x7b, 0x5a, 0x49, 0x64, 0x4e, 0x3d,
	0x2f, 0x42, 0x94, 0xf6, 0x58, 0x14, 0x0c, 0x7d, 0x67, 0x4e, 0x55, 0x5b, 0x60, 0x83, 0x88, 0x0e,
	0xda, 0xbd, 0xba, 0xd2, 0xd8, 0x6e, 0x55, 0xac, 0xc5, 0xc3, 0x58, 0xb2, 0x7b, 0x67, 0xfd, 0xe6,
	0xd7, 0xc3, 0x82, 0x93, 0x30, 0xdb, 0xe5, 0x8f, 0x7f, 0xbe, 0x9e, 0xcc, 0x7b, 0x98, 0x87, 0xa0,
	0xba, 0x64, 0xc7, 0x41, 0x94, 0xe0, 0x21, 0x45, 0xa6, 0x0b, 0x2a, 0x5d, 0xea, 0xf7, 0x46, 0x83,
	0x30, 0x60, 0xa7, 0x84, 0x5c, 0x05, 0x2e, 0x64, 0x01, 0x1e, 0xaa, 0x2f, 0x40, 0xd1, 0x85, 0x43,
	0x2f, 0xe0, 0x25, 0xc2, 0xee, 0x76, 0xab, 0x9a, 0x55, 0xbe, 0x80, 0x57, 0x3c, 0x8b, 0xa3, 0x44,
	0x7c, 0xce, 0x4f, 0xf4, 0xd3, 0xd8, 0x34, 0xc0, 0xd1, 0x2a, 0x91, 0xd4, 0xc4, 0x17, 0x05, 0x6c,
	0x76, 0xa9, 0x7f, 0x81, 0x19, 0x52, 0x1f, 0x80, 0x62, 0x8c, 0x19, 0xea, 0xb3, 0x31, 0x91, 0xc2,
	0x3b, 0xce, 0x16, 0x07, 0xce, 0xc7, 0x04, 0xa9, 0x35, 0x00, 0xf8, 0x77, 0xd4, 0x87, 0x9e, 0x17,
	0x89, 0x0b, 0x29, 0x39, 0x82, 0x1e, 0xf1, 0xfb, 0x53, 0x8f, 0x41, 0x39, 0x15, 0x95, 0x94, 0x35,
	0x41, 0xd9, 0x49, 0x51, 0x41, 0xd3, 0xc0, 0x26, 0x24, 0x24, 0xc2, 0x31, 0xd2, 0xd6, 0xeb, 0x4a,
	0x63, 0xcb, 0x99, 0x85, 0xed, 0x5d, 0x6e, 0x7c, 0x41, 0xc2, 0xdc, 0x13, 0x83, 0xe4, 0xc6, 0x52,
	0xb3, 0x04, 0x94, 0xbb, 0xd4, 0x3f, 0x8b, 0x30, 0xc1, 0x14, 0xbd, 0x0e, 0xdc, 0x0f, 0x2b, 0x64,
	0x95, 0x55, 0xb2, 0x8f, 0xc0, 0x0e, 0x91, 0x55, 0x19, 0xff, 0xa5, 0x19, 0xc8, 0x49, 0x6d, 0x95,
	0x3b, 0xc8, 0xf2, 0x4c, 0x0d, 0x1c, 0x64, 0x15, 0x53, 0x2f, 0x8e, 0x98, 0xde, 0x1b, 0x04, 0x63,
	0x94, 0x8e, 0xa3, 0x87, 0x18, 0x77, 0x14, 0xcf, 0xe2, 0x8c, 0xa3, 0x14, 0x15, 0x62, 0xf7, 0xb9,
	0xd8, 0x12, 0x33, 0x19, 0x56, 0xae, 0xe7, 0x4c, 0xb3, 0xf5, 0x7d, 0x0d, 0xac, 0x75, 0xa9, 0xaf,
	0x9e, 0x83, 0x52, 0x66, 0xc1, 0x6b, 0xd9, 0xf5, 0x58, 0x5a, 0x38, 0xfd, 0xf8, 0xce, 0xf4, 0xac,
	0xbb, 0xea, 0x82, 0xbd, 0xfc, 0x32, 0x9a, 0xb9, 0xda, 0x1c, 0x47, 0x3f, 0xf9, 0x3f, 0x27, 0x15,
	0x79, 0x09, 0xd6, 0xc5, 0xae, 0xed, 0xe7, 0x6a, 0x38, 0xac, 0xd7, 0x56, 0xc2, 0x69, 0xf5, 0x5b,
	0xb0, 0xbd, 0x38, 0xfd, 0xa3, 0x1c, 0x7b, 0x21, 0xab, 0x3f, 0xbe, 0x2b, 0xbb, 0x78, 0xea, 0xfc,
	0x10, 0xf3, 0xa7, 0xce, 0x71, 0x56, 0x9c, 0xfa, 0x9f, 0x83, 0xeb, 0xbc, 0xba, 0x99, 0x18, 0xca,
	0xed, 0xc4, 0x50, 0x7e, 0x4f, 0x0c, 0xe5, 0xf3, 0xd4, 0x28, 0xdc, 0x4e, 0x8d, 0xc2, 0xcf, 0xa9,
	0x51, 0x78, 0xff, 0xc4, 0x0f, 0xd8, 0xe5, 0x68, 0x60, 0xb9, 0x38, 0xb4, 0xe5, 0x43, 0x27, 0x7f,
	0xe3, 0x66, 0xcb, 0xbe, 0x16, 0x8f, 0x1e, 0xff, 0x37, 0xd2, 0xc1, 0x86, 0x78, 0xde, 0x9e, 0xfd,
	0x0d, 0x00, 0x00, 0xff, 0xff, 0x1b, 0xfc, 0x96, 0x52, 0x67, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// UpdateParams defines a governance operation for updating the module parameters.
	// The authority is hard-coded to the Cosmos SDK x/gov module account
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	// SubmitApplication submits an application to join the validator pool.
	SubmitApplication(ctx context.Context, in *MsgSubmitApplication, opts ...grpc.CallOption) (*MsgSubmitApplicationResponse, error)
	// Vote votes on a pending validator's application or kick proposal.
	Vote(ctx context.Context, in *MsgVote, opts ...grpc.CallOption) (*MsgVoteResponse, error)
	// ProposeKick proposes to kick a validator from the validator pool.
	ProposeKick(ctx context.Context, in *MsgProposeKick, opts ...grpc.CallOption) (*MsgProposeKickResponse, error)
	// LeaveValidatorSet executes a validator's request to leave the validator pool.
	LeaveValidatorSet(ctx context.Context, in *MsgLeaveValidatorSet, opts ...grpc.CallOption) (*MsgLeaveValidatorSetResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, "/evmos.poa.v1.Msg/UpdateParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SubmitApplication(ctx context.Context, in *MsgSubmitApplication, opts ...grpc.CallOption) (*MsgSubmitApplicationResponse, error) {
	out := new(MsgSubmitApplicationResponse)
	err := c.cc.Invoke(ctx, "/evmos.poa.v1.Msg/SubmitApplication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Vote(ctx context.Context, in *MsgVote, opts ...grpc.CallOption) (*MsgVoteResponse, error) {
	out := new(MsgVoteResponse)
	err := c.cc.Invoke(ctx, "/evmos.poa.v1.Msg/Vote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ProposeKick(ctx context.Context, in *MsgProposeKick, opts ...grpc.CallOption) (*MsgProposeKickResponse, error) {
	out := new(MsgProposeKickResponse)
	err := c.cc.Invoke(ctx, "/evmos.poa.v1.Msg/ProposeKick", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) LeaveValidatorSet(ctx context.Context, in *MsgLeaveValidatorSet, opts ...grpc.CallOption) (*MsgLeaveValidatorSetResponse, error) {
	out := new(MsgLeaveValidatorSetResponse)
	err := c.cc.Invoke(ctx, "/evmos.poa.v1.Msg/LeaveValidatorSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// UpdateParams defines a governance operation for updating the module parameters.
	// The authority is hard-coded to the Cosmos SDK x/gov module account
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
	// SubmitApplication submits an application to join the validator pool.
	SubmitApplication(context.Context, *MsgSubmitApplication) (*MsgSubmitApplicationResponse, error)
	// Vote votes on a pending validator's application or kick proposal.
	Vote(context.Context, *MsgVote) (*MsgVoteResponse, error)
	// ProposeKick proposes to kick a validator from the validator pool.
	ProposeKick(context.Context, *MsgProposeKick) (*MsgProposeKickResponse, error)
	// LeaveValidatorSet executes a validator's request to leave the validator pool.
	LeaveValidatorSet(context.Context, *MsgLeaveValidatorSet) (*MsgLeaveValidatorSetResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) UpdateParams(ctx context.Context, req *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}
func (*UnimplementedMsgServer) SubmitApplication(ctx context.Context, req *MsgSubmitApplication) (*MsgSubmitApplicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitApplication not implemented")
}
func (*UnimplementedMsgServer) Vote(ctx context.Context, req *MsgVote) (*MsgVoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Vote not implemented")
}
func (*UnimplementedMsgServer) ProposeKick(ctx context.Context, req *MsgProposeKick) (*MsgProposeKickResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProposeKick not implemented")
}
func (*UnimplementedMsgServer) LeaveValidatorSet(ctx context.Context, req *MsgLeaveValidatorSet) (*MsgLeaveValidatorSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveValidatorSet not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/evmos.poa.v1.Msg/UpdateParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SubmitApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSubmitApplication)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SubmitApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/evmos.poa.v1.Msg/SubmitApplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SubmitApplication(ctx, req.(*MsgSubmitApplication))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Vote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgVote)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Vote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/evmos.poa.v1.Msg/Vote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Vote(ctx, req.(*MsgVote))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ProposeKick_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgProposeKick)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ProposeKick(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/evmos.poa.v1.Msg/ProposeKick",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ProposeKick(ctx, req.(*MsgProposeKick))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_LeaveValidatorSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgLeaveValidatorSet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).LeaveValidatorSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/evmos.poa.v1.Msg/LeaveValidatorSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).LeaveValidatorSet(ctx, req.(*MsgLeaveValidatorSet))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "evmos.poa.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
		{
			MethodName: "SubmitApplication",
			Handler:    _Msg_SubmitApplication_Handler,
		},
		{
			MethodName: "Vote",
			Handler:    _Msg_Vote_Handler,
		},
		{
			MethodName: "ProposeKick",
			Handler:    _Msg_ProposeKick_Handler,
		},
		{
			MethodName: "LeaveValidatorSet",
			Handler:    _Msg_LeaveValidatorSet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "evmos/poa/v1/tx.proto",
}

func (m *MsgUpdateParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSubmitApplication) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitApplication) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitApplication) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Candidate.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MsgSubmitApplicationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitApplicationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitApplicationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgVote) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgVote) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgVote) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Approve {
		i--
		if m.Approve {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.CandidateAddr) > 0 {
		i -= len(m.CandidateAddr)
		copy(dAtA[i:], m.CandidateAddr)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CandidateAddr)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.VoterAddr) > 0 {
		i -= len(m.VoterAddr)
		copy(dAtA[i:], m.VoterAddr)
		i = encodeVarintTx(dAtA, i, uint64(len(m.VoterAddr)))
		i--
		dAtA[i] = 0x12
	}
	if m.VoteType != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.VoteType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgVoteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgVoteResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgVoteResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgProposeKick) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgProposeKick) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgProposeKick) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ProposerAddr) > 0 {
		i -= len(m.ProposerAddr)
		copy(dAtA[i:], m.ProposerAddr)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ProposerAddr)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CandidateAddr) > 0 {
		i -= len(m.CandidateAddr)
		copy(dAtA[i:], m.CandidateAddr)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CandidateAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgProposeKickResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgProposeKickResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgProposeKickResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgLeaveValidatorSet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgLeaveValidatorSet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgLeaveValidatorSet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ValidatorAddr) > 0 {
		i -= len(m.ValidatorAddr)
		copy(dAtA[i:], m.ValidatorAddr)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ValidatorAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgLeaveValidatorSetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgLeaveValidatorSetResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgLeaveValidatorSetResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgUpdateParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Params.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgUpdateParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSubmitApplication) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Candidate.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgSubmitApplicationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgVote) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VoteType != 0 {
		n += 1 + sovTx(uint64(m.VoteType))
	}
	l = len(m.VoterAddr)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.CandidateAddr)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Approve {
		n += 2
	}
	return n
}

func (m *MsgVoteResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgProposeKick) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CandidateAddr)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ProposerAddr)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgProposeKickResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgLeaveValidatorSet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ValidatorAddr)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgLeaveValidatorSetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgUpdateParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSubmitApplication) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitApplication: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitApplication: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Candidate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Candidate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSubmitApplicationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitApplicationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitApplicationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgVote) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgVote: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgVote: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoteType", wireType)
			}
			m.VoteType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VoteType |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoterAddr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VoterAddr = append(m.VoterAddr[:0], dAtA[iNdEx:postIndex]...)
			if m.VoterAddr == nil {
				m.VoterAddr = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CandidateAddr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CandidateAddr = append(m.CandidateAddr[:0], dAtA[iNdEx:postIndex]...)
			if m.CandidateAddr == nil {
				m.CandidateAddr = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Approve", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Approve = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgVoteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgVoteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgVoteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgProposeKick) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgProposeKick: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgProposeKick: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CandidateAddr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CandidateAddr = append(m.CandidateAddr[:0], dAtA[iNdEx:postIndex]...)
			if m.CandidateAddr == nil {
				m.CandidateAddr = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposerAddr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProposerAddr = append(m.ProposerAddr[:0], dAtA[iNdEx:postIndex]...)
			if m.ProposerAddr == nil {
				m.ProposerAddr = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgProposeKickResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgProposeKickResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgProposeKickResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgLeaveValidatorSet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgLeaveValidatorSet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgLeaveValidatorSet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddr = append(m.ValidatorAddr[:0], dAtA[iNdEx:postIndex]...)
			if m.ValidatorAddr == nil {
				m.ValidatorAddr = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgLeaveValidatorSetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgLeaveValidatorSetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgLeaveValidatorSetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
