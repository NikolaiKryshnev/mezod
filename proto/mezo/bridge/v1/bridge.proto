syntax = "proto3";
package mezo.bridge.v1;

import "gogoproto/gogo.proto";

option go_package = "github.com/mezo-org/mezod/x/bridge/types";

// Params defines the parameters for the module.
message Params {
  option (gogoproto.goproto_stringer) = false;

  // max_erc20_tokens_mappings is the maximum number of distinct ERC20 tokens
  // mappings that can be supported in the bridge. The reason for this limit is
  // to not downgrade the bridge performance on the Mezo chain side too much.
  uint32 max_erc20_tokens_mappings = 1;
}

// AssetsLockedEvent represents the event where inbound assets are locked in
// the Bitcoin bridge.
message AssetsLockedEvent {
  // sequence is the unique identifier of the event.
  string sequence = 1 [
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false
  ];
  // recipient is the account address to receive the locked assets on Mezo,
  // in Bech32 format.
  string recipient = 2;
  // amount of assets locked, in 1e18 precision.
  string amount = 3 [
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false
  ];
  // token is the hex-encoded EVM address of the bridged token.
  string token = 4;
}

// ERC20TokenMapping defines a mapping between an ERC20 token on the source chain
// and on the Mezo chain.
message ERC20TokenMapping {
  // source_token is the hex-encoded EVM address of the token on the source chain.
  string source_token = 1;

  // mezo_token is the hex-encoded EVM address of the token on the Mezo chain.
  string mezo_token = 2;
}
