syntax = "proto3";
package evmos.poa.v1;

import "evmos/poa/v1/poa.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";

option go_package = "github.com/evmos/evmos/v12/x/poa/types";

// Query defines the gRPC querier service.
service Query {
  // Params queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/evmos/poa/v1/params";
  }
  // Validators queries all validators of the module.
  rpc Validators(QueryValidatorsRequest) returns (QueryValidatorsResponse) {
    option (google.api.http).get = "/evmos/poa/v1/validators";
  }
  // Validator queries a single validator by address.
  rpc Validator(QueryValidatorRequest) returns (QueryValidatorResponse) {
    option (google.api.http).get = "/evmos/poa/v1/validators/{validator_addr}";
  }
  // Applications queries all validators' applications of the module.
  rpc Applications(QueryApplicationsRequest) returns (QueryApplicationsResponse) {
    option (google.api.http).get = "/evmos/poa/v1/applications";
  }
  // KickProposals queries all kick proposals of the module.
  rpc KickProposals(QueryKickProposalsRequest) returns (QueryKickProposalsResponse) {
    option (google.api.http).get = "/evmos/poa/v1/kick_proposals";
  }
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of the module.
  Params params = 1 [(gogoproto.nullable) = false];
}

// QueryValidatorsRequest is request type for the Query/Validators RPC method.
message QueryValidatorsRequest {}

// QueryValidatorsResponse is response type for the Query/Validators RPC method.
message QueryValidatorsResponse {
  // validators holds all the validators of the module.
  repeated Validator validators = 1 [(gogoproto.nullable) = false];
}

// QueryValidatorRequest is request type for the Query/Validator RPC method.
message QueryValidatorRequest {
  // validator_addr is the address of the validator to query.
  string validator_addr = 1;
}

// QueryValidatorResponse is response type for the Query/Validator RPC method.
message QueryValidatorResponse {
  // validator holds the queried validator.
  Validator validator = 1 [(gogoproto.nullable) = false];
}

// QueryApplicationsRequest is request type for the Query/Applications RPC method.
message QueryApplicationsRequest {}

// QueryApplicationsResponse is response type for the Query/Applications RPC method.
message QueryApplicationsResponse {
  // applications holds all the validators' applications of the module.
  repeated Vote applications = 1 [(gogoproto.nullable) = false];
}

// QueryKickProposalsRequest is request type for the Query/KickProposals RPC method.
message QueryKickProposalsRequest {}

// QueryKickProposalsResponse is response type for the Query/KickProposals RPC method.
message QueryKickProposalsResponse {
  // kick_proposals holds all the kick proposals of the module.
  repeated Vote kick_proposals = 1 [(gogoproto.nullable) = false];
}
