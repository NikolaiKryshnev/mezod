syntax = "proto3";
package evmos.poa.v1;

import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "evmos/poa/v1/poa.proto";
import "gogoproto/gogo.proto";

option go_package = "github.com/evmos/evmos/v12/x/poa/types";

// Msg defines the Msg service.
service Msg {
  // UpdateParams defines a governance operation for updating the module parameters.
  // The authority is hard-coded to the Cosmos SDK x/gov module account
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);
  // SubmitApplication submits an application to join the validator pool.
  rpc SubmitApplication(MsgSubmitApplication) returns (MsgSubmitApplicationResponse);
  // Vote votes on a pending validator's application or kick proposal.
  rpc Vote(MsgVote) returns (MsgVoteResponse);
  // ProposeKick proposes to kick a validator from the validator pool.
  rpc ProposeKick(MsgProposeKick) returns (MsgProposeKickResponse);
  // LeaveValidatorSet executes a validator's request to leave the validator pool.
  rpc LeaveValidatorSet(MsgLeaveValidatorSet) returns (MsgLeaveValidatorSetResponse);
}

// MsgUpdateParams defines a Msg to update the module parameters.
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";

  // authority is the address of the governance account.
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // params defines the module parameters to update.
  // NOTE: All parameters must be supplied.
  Params params = 2 [(gogoproto.nullable) = false];
}

// MsgUpdateParamsResponse defines the response of the Msg/UpdateParams RPC method.
message MsgUpdateParamsResponse {}

// MsgSubmitApplication defines a Msg to submit an application to join
// the validator pool.
message MsgSubmitApplication {
  option (cosmos.msg.v1.signer) = "candidate";

  // candidate is the validator candidate submitting the application.
  Validator candidate = 1 [(gogoproto.nullable) = false];
}

// MsgSubmitApplicationResponse defines the response of the
// Msg/SubmitApplication RPC method.
message MsgSubmitApplicationResponse {}

// MsgVote defines a Msg to vote on a pending validator's application or
// kick proposal.
message MsgVote {
  option (cosmos.msg.v1.signer) = "voter_addr";

  // vote_type is the type of vote being cast. It can be either 0 for validator's
  // application or 1 for kick proposal.
  uint32 vote_type = 1;
  // voter_addr is the address of the validator casting the vote.
  bytes voter_addr = 2;
  // candidate_addr is the address of the candidate being voted on.
  bytes candidate_addr = 3;
  // approve is a boolean indicating whether the vote is to approve the action.
  bool approve = 4;
}

// MsgVoteResponse defines the response of the Msg/Vote RPC method.
message MsgVoteResponse {}

// MsgProposeKick defines a Msg to propose to kick a validator from the
// validator pool.
message MsgProposeKick {
  option (cosmos.msg.v1.signer) = "proposer_addr";

  // candidate_addr is the address of the validator being proposed to be kicked.
  bytes candidate_addr = 1;
  // proposer_addr is the address of the validator proposing the kick.
  bytes proposer_addr = 2;
}

// MsgProposeKickResponse defines the response of the Msg/ProposeKick RPC method.
message MsgProposeKickResponse {}

// MsgLeaveValidatorSet defines a Msg to execute a validator's request to leave
// the validator pool.
message MsgLeaveValidatorSet {
  option (cosmos.msg.v1.signer) = "validator_addr";

  // validator_addr is the address of the validator requesting to leave the pool.
  bytes validator_addr = 1;
}

// MsgLeaveValidatorSetResponse defines the response of the
// Msg/LeaveValidatorSet RPC method.
message MsgLeaveValidatorSetResponse {}
